---
.title = "Building a real-time Websocket webapp with Kafka and Javascript",
.description = "Given a change in the database, show the changes to the clients via websockets",
.author = "Vinicyus Brasil",
.layout = "post.shtml",
.date = @date("2025-01-06T00:00:00"),
.draft = false,
---

## Introduction


In this project we'll create a webapp which send a `websocket message` to their clients after
receiving a message from a Kafka topic. This message comes from a new record being inserted in the database 
from a API and captured by `debezium`. 

The motivation for this project it's that recently I've been really interested on how sports betting website works, on how every second they're 
updating the odds in the screen. The answer is `websockets`, which can be used to update in 
near real-time the information to the client. 



[]($image.asset("websocket.png")) 

1) build the API to create the data;
2) up the database and the scripts;
3) up kafka and kafka connect with the necessary scripts;
4) create the websocket server and the client


## API to send request to database


This payload will be sent to the database:

```
{
    "game_id": "123121",
    "odd1": 1.07,
    "odd2": 3.54,
    "odd3": 0.96,
    "odd4": 3.34,
    "odd5": 1.96
}
```


```python
import mysql.connector 
import random
import requests

from fastapi import FastAPI

app = FastAPI()


KAFKA_CONNECT_IP = "172.18.0.6"
MYSQL_IP = "172.18.0.2"

@app.on_event("startup")
async def startup_event():
    global mydb
    mydb = mysql.connector.connect(
    host=MYSQL_IP,
    user="debezium",
    password="dbz",
    database="gameodds"
    )


@app.get("/games/{game_id}")
def get_game_odds(game_id: str):
    mycursor = mydb.cursor()

    mycursor.execute(f"SELECT * FROM game_{game_id}")

    myresult = mycursor.fetchall()

    return myresult

@app.get("/games")
def get_game_odds():
    mycursor = mydb.cursor()

    mycursor.execute(f"SELECT * FROM available_games")

    myresult = mycursor.fetchall()

    return myresult

@app.post("/creategame/{game_id}")
def create_game(game_id: str):
    mycursor = mydb.cursor()

    sql = f'''
        CREATE TABLE IF NOT EXISTS game_{game_id} (
            row_id INT AUTO_INCREMENT PRIMARY KEY,
            game_id VARCHAR(50) NOT NULL,
            odd1 VARCHAR(50),
            odd2 VARCHAR(50),
            odd3 VARCHAR(50),
            odd4 VARCHAR(50),
            odd5 VARCHAR(50),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );   
    '''

    mycursor.execute(sql)

    mydb.commit()

    mycursor = mydb.cursor()

    sql = f'''INSERT INTO available_games (game_id, game_id_name, connector_name) 
        SELECT '{game_id}', '{"game_" + str(game_id)}', 
        '{"mysql-debezium-json-no-schema-asgard.gameodds.game_" + str(game_id)}' 
        FROM DUAL WHERE NOT EXISTS ( SELECT 1 FROM available_games WHERE game_id = '{game_id}' ); 
        '''
    print(sql)
    mycursor.execute(sql)

    mydb.commit()

    create_connector = requests.post(f"http://{KAFKA_CONNECT_IP}:8083/connectors/", headers={"Accept": "application/json", "Content-Type":"application/json"}, json={
      "name": f"source-debezium-orders-{game_id}",
      "config": {
            "connector.class": "io.debezium.connector.mysql.MySqlConnector",
            "database.hostname": "mysql",
            "database.port": "3306",
            "database.user": "debezium",
            "database.password": "dbz",
            "database.server.id": f"{game_id}",
            "database.server.name": "asgard",
            "table.whitelist": f"gameodds.game_{game_id}",
            "database.history.kafka.bootstrap.servers": "kafka:29092",
            "database.history.kafka.topic": f"dbserver_{game_id}" ,
            "decimal.handling.mode": "double",
            "include.schema.changes": "true",
            "value.converter": "org.apache.kafka.connect.json.JsonConverter",
            "value.converter.schemas.enable": "false",
            "key.converter": "org.apache.kafka.connect.json.JsonConverter",
            "key.converter.schemas.enable": "false",
            "transforms": "unwrap,addTopicPrefix",
            "transforms.unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
            "transforms.addTopicPrefix.type":"org.apache.kafka.connect.transforms.RegexRouter",
            "transforms.addTopicPrefix.regex":"(.*)",
            "transforms.addTopicPrefix.replacement":"mysql-debezium-json-no-schema-$1",
            "database.allowPublicKeyRetrieval": "true"
       }
    })



@app.post("/sendodd/{game_id}")
def read_root(game_id: str):
    mycursor = mydb.cursor()

    odd1 = round(random.random() * 5, 2)
    odd2 = round(random.random() * 5, 2)
    odd3 = round(random.random() * 5, 2)
    odd4 = round(random.random() * 5, 2)
    odd5 = round(random.random() * 5, 2)

    sql = f'INSERT INTO game_{game_id} (game_id, odd1, odd2, odd3, odd4, odd5) VALUES ({game_id}, {str(odd1)}, {str(odd2)}, {str(odd3)}, {str(odd4)}, {str(odd5)})'

    mycursor.execute(sql)

    mydb.commit()

    print(mycursor.rowcount, "record inserted.")

    return {"game_id": game_id, "odd1": odd1, "odd2": odd2, "odd3": odd3, "odd4": odd4, "odd5" : odd5}

```
To get the IPs: 

```
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq --filter "name=mysql")

docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq --filter "name=kafka")

docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq --filter "name=kafka-connect")
```
Containerazing it with Docker
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

and building the project: 
```
docker build -t fastapi-image . && docker run -d --name fastapi-container -p 80:80 --net websockets_default fastapi-image
```

Finally, testing it: 
```
curl -X POST "localhost:80/sendodd/123122"
```




## The docker-compose file


```bash
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
    depends_on:
      - zookeeper

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - 3306:3306
    environment:
     - MYSQL_ROOT_PASSWORD=debezium
     - MYSQL_USER=mysqluser
     - MYSQL_PASSWORD=mysqlpw
    volumes:
     - ${PWD}/data/mysql:/docker-entrypoint-initdb.d
     - ${PWD}/data:/data
     - ./mysql-init:/docker-entrypoint-initdb.d
  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    container_name: schema-registry
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:7.8.0
    container_name: kafka-connect
    depends_on:
      - kafka
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    volumes:
      - $PWD/data:/data
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:1.7.0
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity

networks:
  my-network-name:
   name: websockets
```

## Setting up the database

```bash
CREATE USER 'debezium'@'%' IDENTIFIED BY 'dbz';

GRANT ALL PRIVILEGES ON *.* TO 'debezium'@'%' WITH GRANT OPTION;

FLUSH PRIVILEGES;


CREATE DATABASE IF NOT EXISTS gameodds;

USE gameodds;

CREATE TABLE IF NOT EXISTS available_games (
    row_id INT AUTO_INCREMENT PRIMARY KEY,
    game_id VARCHAR(50) NOT NULL,
    game_id_name VARCHAR(50) NOT NULL,
    connector_name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Setting up Kafka Connector and debezium

```bash
docker-compose up -f docker-compose.yml -d 
```


## JS Websocket server

The first thing we'll need is the websocket server, which will receive the messages from the Kafka topic and send them 
to all the websocket clients. 

```bash
cd websocket_server
npm init

npm install ws@8.18.0 uuid@11.0.4
```

The following code creates a websocket server and a variable called `raw_odds`, the one which will store what comes from the 
Kafka topic.

```javascript
const WebSocket = require("ws");
const uuidv4 = require("uuid").v4;
var mysql = require("mysql2");

const MYSQL_IP = "172.18.0.2";
const KAFKA_IP = "172.18.0.4";

let connection_names = [];

var con = mysql.createConnection({
  host: MYSQL_IP,
  port: "3306",
  user: "debezium",
  password: "dbz",
  database: "gameodds",
});

const wss = new WebSocket.Server({ port: 81 });
const { Kafka } = require("kafkajs");

console.log("Server running");

const clients = {};
var last_odds = {};

const kafka = new Kafka({
  brokers: [`${KAFKA_IP}:29092`],
});

const consumer = kafka.consumer({ groupId: "group-1" });

con.connect(function (err) {
  if (err) throw err;
  con.query(
    "SELECT connector_name FROM available_games",
    function (err, result, fields) {
      if (err) throw err;
      console.log(`c3: ${result}`);
      var values = result.map((item) => item.connector_name);
      connection_names = values;
      console.log(`c4: ${connection_names}`);
      run(connection_names).catch(console.error);
    }
  );
});

var last_odds = {};

const run = async (connection_names) => {
  await consumer.connect();

  console.log(`c2: ${connection_names}`);

  await connection_names.forEach((item) => {
    console.log(`connecting: ${item}`);
    consumer.subscribe({
      topics: [item],
      fromBeginning: false,
    });
  });

  await consumer.run({
    eachMessage: async ({ topic, partition, message }) => {
      console.log({
        value: message.value.toString(),
        topic,
        partition,
      });
      last_odds = JSON.parse(message.value.toString());
    },
  });
};

wss.on("connection", (ws) => {
  console.log("Client connected");

  const userId = uuidv4();
  console.log("Received a new connection");

  clients[userId] = ws;

  ws.send(`${userId}`);

  ws.on("close", () => {
    console.log("Client disconnected");
  });
});

function update() {
  console.log(last_odds);
  console.log(connection_names);

  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(last_odds));
    }
  });
}

const intervalId = setInterval(update, 5000);
```

In the utils/ folder of the project, a test can be performed. It will just open a connection, send a websocket message to the server
and then close it. The test_websocket.js: 

```javascript
import WebSocket from 'ws';

var user = {
    clientId: '',
    data: {'payload': {'odd1': 1.2}} 
  }

const wss = new WebSocket('ws://localhost:8080', {
  perMessageDeflate: false
});

wss.on('open', function open() {
    wss.send('{}');
  });

wss.on('message', function message(event) {

    if (user.clientId === ''){
      user['clientId'] = event.toString();

    }
    console.log(user);
  });

function sendMessage(){
    const message = JSON.stringify(user.data);
    wss.send(message);
    wss.close();
}
setTimeout(      
    sendMessage, 2000
)
```

To run it, the server must be running first:
```bash
node websocket-server/index.js
```

Then the test can be performed:
```bash
node test_websocket.js
```

```
FROM node:22

WORKDIR /usr/src/app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 3000

CMD ["node", "index.js"]
```

## JS Websocket client

For the client, we'll use React. Creating the project in the websocket_client folder create-react-app@5.0.1, web-vitals@4.2.4 and ws@8.18.0.


[]($image.asset("final.png")) 

The App.js will be:

```javascript
import './App.css';

import React, { useEffect, useState } from 'react';


const WEBSOCKETSERVER_IP = "127.0.0.1";
const socket = new WebSocket(`ws://${WEBSOCKETSERVER_IP}:81`);

var user = {
  clientId: ''
}

const OutputComponent = ({ messages }) => {
  return (
    <div id="output">
      {messages.map((game, index) => (
        <div key={index} className="container">
          <ul className="list">
            <li>
              <div>Game ID: {game.game_id}</div>
              <div>Odd 1: {game.odd1.toFixed(4)}</div>
              <div>Odd 2: {game.odd2.toFixed(4)}</div>
              <div>Odd 3: {game.odd3.toFixed(4)}</div>
              <div>Odd 4: {game.odd4.toFixed(4)}</div>
              <div>Odd 5: {game.odd5.toFixed(4)}</div>
            </li>
          </ul>
        </div>
      ))}
    </div>
  );
};

function App() {

  const [message1, setMessage1] = useState({});
  const [message2, setMessage2] = useState({});
  const [game_ids, setGameIds] = useState([]);

  const messages = [
    { game_id: "12345", odd1: 2.5, odd2: 3.1, odd3: 4.0, odd4: 1.8, odd5: 5.2 },
    { game_id: "67890", odd1: 1.5, odd2: 2.1, odd3: 3.0, odd4: 1.3, odd5: 4.2 },
    { game_id: "54321", odd1: 3.5, odd2: 4.1, odd3: 5.0, odd4: 2.8, odd5: 6.2 },
  ];

  useEffect(() => {

    socket.onopen = function (event) {
      console.log('You are Connected to WebSocket Server');
    };
    socket.onmessage = function (event) {

      if (user.clientId === '') {
        user['clientId'] = event.data;
        return;
      }

      const payload = JSON.parse(event.data);

      if (payload.game_id === '123120'){
        setMessage1(payload);
      } else if (payload.game_id === '123121') {
        setMessage2(payload);
      }

    };

    socket.onclose = function (event) {
      console.log('Disconnected from WebSocket server');
    };


  });

  function sendMessage() {

    const messageInput = { 'payload': 'vapo2', 'clientId': user.clientId };

    const message = JSON.stringify(messageInput);

    socket.send(message);

  };

  function addGame(game_id) {
    if (!game_ids.includes(game_id) ){
      setGameIds(game_ids => [...game_ids, game_id]);
    }
  };


  return (
    <div className="App">
      <header className="App-header">
        <h1>
          Odds Market Simulator
        </h1>

      <OutputComponent messages={messages} />

      </header>
    </div>
  );
}

export default App;

```

Givin' it some style with css, the App.css.

```
FROM node:18-alpine AS build
WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

RUN npm run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
```


